#include <iostream>
#include<cstdio>

using namespace std;

int n;

int tianji[101];

int qiwang[101];

void init();
int max_1(int x,int y);

int dp(int index, int j);

int memo[101][101];

int main()
{
    //freopen("1.txt","r",stdin);
    while(cin>>n&&n)
    {
        int i;
        for( i=0; i<n; i++)
        {
            cin>>tianji[i];
        }
        for( i=0; i<n; i++)
        {
            cin>>qiwang[i];
        }

        init();

        cout<<dp(n-1, 0)<<endl;
    }
    return 0;
}

void init()
{
    int i,j;
    for( i=0; i<n; i++)  //清空备忘录
    {
        for( j=0; j<n; j++)
        {
            memo[i][j]=INT_MAX;
        }
    }

    for( i=0; i<n; i++)  //冒泡排序
    {
        for( j=i; j<n; j++)
        {
            if(tianji[i]<tianji[j])
            {
                swap(tianji[i],tianji[j]);
            }
            if(qiwang[i]<qiwang[j])
            {
                swap(qiwang[i],qiwang[j]);
            }
        }
    }
}

int dp(int index, int j)
{
    if(index==-1)   //所有马都比完了
    {
        return 0;
    }
    else if(memo[index][j]!=INT_MAX) //备忘录中已有数据，直接调取
    {
        return memo[index][j];
    }
    else    //否则填写备忘录
    {
        if(tianji[index]>qiwang[j+index])       //最下等马赢最下等马
        {
            memo[index][j]=dp(index-1,j)+1;
        }
        else if(tianji[index]<qiwang[j+index])  //最下等马输最下等马，就磕掉一匹齐王当前的最上等马
        {
            memo[index][j]=dp(index-1,j+1)-1;
        }
        else    //最下等马平最下等马，此时需要判断两种情况
        {
            int x=dp(index-1, j);   //第一种情况：就让最下等马和最下等马比

            int y=dp(index-1, j+1)+(tianji[index]<qiwang[j]? -1: 0);
                                    //第二种情况：让最下等马和最上等马比，有可能平/输

            memo[index][j]=max_1(x, y);   //两种情况取最好的
        }

        return memo[index][j];
    }
}
int max_1(int x,int y)
{
    return x>y?x:y;
}
